// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentData = {
  transactions: [],
  categories: {},
  totals: { income: 0, expense: 0, balance: 0 }
};

let charts = {
  expenseChart: null,
  incomeChart: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('DOMContentLoaded', () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  Telegram.WebApp.ready();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
  setupTheme();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
  initTabs();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  initFilters();
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  loadData();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Telegram
function setupTheme() {
  const themeParams = Telegram.WebApp.themeParams;
  const root = document.documentElement;
  
  if (themeParams) {
    Object.keys(themeParams).forEach(key => {
      root.style.setProperty(`--tg-theme-${key}`, themeParams[key]);
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
function initTabs() {
  const tabBtns = document.querySelectorAll('.tab-btn');
  const tabPanes = document.querySelectorAll('.tab-pane');
  
  tabBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const targetTab = btn.getAttribute('data-tab');
      
      // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ø–∞–Ω–µ–ª–µ–π
      tabBtns.forEach(b => b.classList.remove('active'));
      tabPanes.forEach(p => p.classList.remove('active'));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏ –ø–∞–Ω–µ–ª–∏
      btn.classList.add('active');
      document.getElementById(targetTab).classList.add('active');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
      updateTabContent(targetTab);
    });
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function initFilters() {
  const periodFilter = document.getElementById('periodFilter');
  const typeFilter = document.getElementById('typeFilter');
  
  periodFilter.addEventListener('change', () => {
    filterTransactions();
  });
  
  typeFilter.addEventListener('change', () => {
    filterTransactions();
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
  showLoading();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    const user = Telegram.WebApp.initDataUnsafe?.user;
    const chatId = user?.id || 'demo';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å)
    const data = await fetchUserData(chatId);
    currentData = data;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateBalance();
    updateTransactions();
    updateCategories();
    updateCharts();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function fetchUserData(chatId) {
  console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è chatId:', chatId);
  console.log('üîó API URL:', CONFIG.api.baseUrl);
  
  try {
    const url = `${CONFIG.api.baseUrl}?chat_id=${chatId}`;
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫:', url);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
    
    if (data.error) {
      throw new Error(data.error);
    }

    if (!data.transactions || !data.totals) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API');
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
      Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ');
    return {
      transactions: [
        {
          id: 1,
          date: '2024-01-15',
          category: '–ü—Ä–æ–¥—É–∫—Ç—ã',
          amount: 25000,
          type: 'expense',
          comment: 'Magnum'
        },
        {
          id: 2,
          date: '2024-01-14',
          category: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
          amount: 500000,
          type: 'income',
          comment: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —è–Ω–≤–∞—Ä—å'
        },
        {
          id: 3,
          date: '2024-01-13',
          category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
          amount: 15000,
          type: 'expense',
          comment: '–¢–∞–∫—Å–∏'
        },
        {
          id: 4,
          date: '2024-01-12',
          category: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
          amount: 80000,
          type: 'expense',
          comment: '–ö–∏–Ω–æ'
        },
        {
          id: 5,
          date: '2024-01-11',
          category: '–ü—Ä–æ–¥–∞–∂–∞',
          amount: 150000,
          type: 'income',
          comment: '–ü—Ä–æ–¥–∞–∂–∞ –≤–µ—â–µ–π'
        }
      ],
      categories: {
        '–ü—Ä–æ–¥—É–∫—Ç—ã': { amount: 25000, percentage: 20 },
        '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': { amount: 15000, percentage: 12 },
        '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': { amount: 80000, percentage: 64 },
        '–ó–∞—Ä–ø–ª–∞—Ç–∞': { amount: 500000, percentage: 100 },
        '–ü—Ä–æ–¥–∞–∂–∞': { amount: 150000, percentage: 100 }
      },
      totals: {
        income: 650000,
        expense: 120000,
        balance: 530000
      }
    };
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
function updateBalance() {
  document.getElementById('totalIncome').textContent = formatMoney(currentData.totals.income) + ' ‚Ç∏';
  document.getElementById('totalExpense').textContent = formatMoney(currentData.totals.expense) + ' ‚Ç∏';
  document.getElementById('totalBalance').textContent = formatMoney(currentData.totals.balance) + ' ‚Ç∏';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function updateTransactions() {
  const container = document.getElementById('transactionsList');
  const transactions = currentData.transactions;
  
  if (transactions.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üìä</div>
        <div class="empty-state-text">–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>
        <div class="empty-state-subtext">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–æ—Ç–µ</div>
      </div>
    `;
    return;
  }
  
  container.innerHTML = transactions.map(transaction => `
    <div class="transaction-item">
      <div class="transaction-info">
        <div class="transaction-category">${transaction.category}</div>
        <div class="transaction-date">${formatDate(transaction.date)}</div>
        ${transaction.comment ? `<div class="transaction-comment">${transaction.comment}</div>` : ''}
      </div>
      <div class="transaction-amount ${transaction.type}">
        ${transaction.type === 'income' ? '+' : '-'}${formatMoney(transaction.amount)} ‚Ç∏
      </div>
    </div>
  `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function updateCategories() {
  const container = document.getElementById('categoriesGrid');
  const categories = currentData.categories;
  
  if (Object.keys(categories).length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üìä</div>
        <div class="empty-state-text">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</div>
        <div class="empty-state-subtext">–î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</div>
      </div>
    `;
    return;
  }
  
  container.innerHTML = Object.entries(categories).map(([name, data]) => `
    <div class="category-card">
      <div class="category-icon">${getCategoryIcon(name)}</div>
      <div class="category-name">${name}</div>
      <div class="category-amount">${formatMoney(data.amount)} ‚Ç∏</div>
      <div class="category-percentage">${data.percentage}%</div>
    </div>
  `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
function updateCharts() {
  updateExpenseChart();
  updateIncomeChart();
}

// –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
function updateExpenseChart() {
  const ctx = document.getElementById('expenseChart');
  if (!ctx) return;
  
  // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
  if (charts.expenseChart) {
    charts.expenseChart.destroy();
  }
  
  const expenseCategories = Object.entries(currentData.categories)
    .filter(([name, data]) => data.amount > 0)
    .sort((a, b) => b[1].amount - a[1].amount);
  
  if (expenseCategories.length === 0) {
    ctx.parentElement.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-text">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞</div>
      </div>
    `;
    return;
  }
  
  charts.expenseChart = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: expenseCategories.map(([name]) => name),
      datasets: [{
        data: expenseCategories.map(([, data]) => data.amount),
        backgroundColor: [
          '#FF6384',
          '#36A2EB',
          '#FFCE56',
          '#4BC0C0',
          '#9966FF',
          '#FF9F40'
        ]
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom'
        },
        title: {
          display: true,
          text: '–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'
        }
      }
    }
  });
}

// –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤
function updateIncomeChart() {
  const ctx = document.getElementById('incomeChart');
  if (!ctx) return;
  
  // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
  if (charts.incomeChart) {
    charts.incomeChart.destroy();
  }
  
  const incomeCategories = Object.entries(currentData.categories)
    .filter(([name, data]) => data.amount > 0 && isIncomeCategory(name))
    .sort((a, b) => b[1].amount - a[1].amount);
  
  if (incomeCategories.length === 0) {
    ctx.parentElement.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-text">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞</div>
      </div>
    `;
    return;
  }
  
  charts.incomeChart = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: incomeCategories.map(([name]) => name),
      datasets: [{
        data: incomeCategories.map(([, data]) => data.amount),
        backgroundColor: [
          '#28a745',
          '#20c997',
          '#17a2b8',
          '#6f42c1'
        ]
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom'
        },
        title: {
          display: true,
          text: '–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'
        }
      }
    }
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏
function updateTabContent(tabName) {
  switch (tabName) {
    case 'transactions':
      filterTransactions();
      break;
    case 'charts':
      updateCharts();
      break;
    case 'categories':
      updateCategories();
      break;
  }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function filterTransactions() {
  const periodFilter = document.getElementById('periodFilter').value;
  const typeFilter = document.getElementById('typeFilter').value;
  
  let filteredTransactions = [...currentData.transactions];
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
  if (periodFilter !== 'all') {
    const now = new Date();
    const currentMonth = now.getMonth();
    const currentYear = now.getFullYear();
    
    filteredTransactions = filteredTransactions.filter(transaction => {
      const transactionDate = new Date(transaction.date);
      
      switch (periodFilter) {
        case 'current':
          return transactionDate.getMonth() === currentMonth && 
                 transactionDate.getFullYear() === currentYear;
        case 'last':
          const lastMonth = currentMonth === 0 ? 11 : currentMonth - 1;
          const lastYear = currentMonth === 0 ? currentYear - 1 : currentYear;
          return transactionDate.getMonth() === lastMonth && 
                 transactionDate.getFullYear() === lastYear;
        case 'week':
          const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
          return transactionDate >= weekAgo;
        default:
          return true;
      }
    });
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
  if (typeFilter !== 'all') {
    filteredTransactions = filteredTransactions.filter(transaction => 
      transaction.type === typeFilter
    );
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const container = document.getElementById('transactionsList');
  
  if (filteredTransactions.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üîç</div>
        <div class="empty-state-text">–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>
        <div class="empty-state-subtext">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</div>
      </div>
    `;
    return;
  }
  
  container.innerHTML = filteredTransactions.map(transaction => `
    <div class="transaction-item">
      <div class="transaction-info">
        <div class="transaction-category">${transaction.category}</div>
        <div class="transaction-date">${formatDate(transaction.date)}</div>
        ${transaction.comment ? `<div class="transaction-comment">${transaction.comment}</div>` : ''}
      </div>
      <div class="transaction-amount ${transaction.type}">
        ${transaction.type === 'income' ? '+' : '-'}${formatMoney(transaction.amount)} ‚Ç∏
      </div>
    </div>
  `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function refreshData() {
  loadData();
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
function downloadReport() {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
  Telegram.WebApp.showAlert('–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatMoney(amount) {
  return new Intl.NumberFormat('ru-RU').format(amount);
}

function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

function getCategoryIcon(categoryName) {
  const icons = {
    '–ü—Ä–æ–¥—É–∫—Ç—ã': 'üõí',
    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöó',
    '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'üé¨',
    '–ó–∞—Ä–ø–ª–∞—Ç–∞': 'üí∞',
    '–ü—Ä–æ–¥–∞–∂–∞': 'üì¶',
    '–¢–∞–∫—Å–∏': 'üöï',
    '–û–¥–µ–∂–¥–∞': 'üëï',
    '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'üçΩÔ∏è',
    '–ö–∏–Ω–æ': 'üé≠',
    '–°–ø–æ—Ä—Ç': '‚öΩ',
    '–ó–¥–æ—Ä–æ–≤—å–µ': 'üè•',
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'üìö',
    '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': '‚úàÔ∏è',
    '–ü–æ–¥–∞—Ä–∫–∏': 'üéÅ',
    '–ö–æ–º—É–Ω–∞–ª—å–Ω—ã–µ': 'üè†',
    '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç': 'üåê',
    '–¢–µ–ª–µ—Ñ–æ–Ω': 'üì±'
  };
  
  return icons[categoryName] || 'üìä';
}

function isIncomeCategory(categoryName) {
  const incomeCategories = ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ü—Ä–æ–¥–∞–∂–∞', '–í–æ–∑–≤—Ä–∞—Ç', '–ö–µ—à–±–µ–∫', '–î–æ—Ö–æ–¥'];
  return incomeCategories.includes(categoryName);
}

function showLoading() {
  const containers = ['transactionsList', 'categoriesGrid'];
  containers.forEach(id => {
    const container = document.getElementById(id);
    if (container) {
      container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>';
    }
  });
}

function showError(message) {
  const containers = ['transactionsList', 'categoriesGrid'];
  containers.forEach(id => {
    const container = document.getElementById(id);
    if (container) {
      container.innerHTML = `
        <div class="empty-state">
          <div class="empty-state-icon">‚ùå</div>
          <div class="empty-state-text">–û—à–∏–±–∫–∞</div>
          <div class="empty-state-subtext">${message}</div>
        </div>
      `;
    }
  });
}