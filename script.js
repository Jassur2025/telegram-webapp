// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentData = {
  transactions: [],
  categories: {},
  totals: { income: 0, expense: 0, balance: 0 },
  goals: [],
  debts: [],
  user: null
};

let charts = {
  expenseChart: null,
  incomeChart: null,
  trendChart: null
};

let currentPeriod = {
  type: 'current',
  startDate: null,
  endDate: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('DOMContentLoaded', () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  Telegram.WebApp.ready();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
  setupTheme();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  initUser();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
  initTabs();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  initFilters();
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  loadData();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Telegram
function setupTheme() {
  const themeParams = Telegram.WebApp.themeParams;
  const root = document.documentElement;
  
  if (themeParams) {
    Object.keys(themeParams).forEach(key => {
      root.style.setProperty(`--tg-theme-${key}`, themeParams[key]);
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUser() {
  const user = Telegram.WebApp.initDataUnsafe?.user;
  if (user) {
    currentData.user = user;
    updateUserInfo();
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function updateUserInfo() {
  const userInfo = document.getElementById('userInfo');
  if (userInfo && currentData.user) {
    userInfo.innerHTML = `
      <div class="user-avatar">
        ${currentData.user.first_name ? currentData.user.first_name.charAt(0).toUpperCase() : 'U'}
      </div>
      <div class="user-details">
        <div class="user-name">${currentData.user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
        <div class="user-id">ID: ${currentData.user.id}</div>
      </div>
    `;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
function initTabs() {
  const tabBtns = document.querySelectorAll('.tab-btn');
  const tabPanes = document.querySelectorAll('.tab-pane');
  
  tabBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const targetTab = btn.getAttribute('data-tab');
      
      // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ø–∞–Ω–µ–ª–µ–π
      tabBtns.forEach(b => b.classList.remove('active'));
      tabPanes.forEach(p => p.classList.remove('active'));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏ –ø–∞–Ω–µ–ª–∏
      btn.classList.add('active');
      document.getElementById(targetTab).classList.add('active');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
      updateTabContent(targetTab);
    });
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function initFilters() {
  const periodFilter = document.getElementById('periodFilter');
  const typeFilter = document.getElementById('typeFilter');
  
  periodFilter.addEventListener('change', () => {
    if (periodFilter.value === 'custom') {
      showCustomPeriodModal();
    } else {
      currentPeriod.type = periodFilter.value;
      filterTransactions();
    }
  });
  
  typeFilter.addEventListener('change', () => {
    filterTransactions();
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
  showLoading();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    const user = Telegram.WebApp.initDataUnsafe?.user;
    const chatId = user?.id || 'demo';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const data = await fetchUserData(chatId);
    currentData = { ...currentData, ...data };
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await loadGoals(chatId);
    await loadDebts(chatId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateBalance();
    updateTransactions();
    updateCategories();
    updateGoals();
    updateDebts();
    updateCharts();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function fetchUserData(chatId) {
  console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è chatId:', chatId);
  console.log('üîó API URL:', CONFIG.api.baseUrl);
  
  try {
    const url = `${CONFIG.api.baseUrl}?chat_id=${chatId}`;
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫:', url);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
    
    if (data.error) {
      throw new Error(data.error);
    }

    if (!data.transactions || !data.totals) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API');
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
      Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ');
    return getDemoData();
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–ª–µ–π
async function loadGoals(chatId) {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ü–µ–ª–µ–π
    currentData.goals = [
      {
        id: 1,
        name: '–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω',
        target: 5000000,
        current: 1500000,
        deadline: '2024-12-31',
        category: '–¢–µ—Ö–Ω–∏–∫–∞'
      },
      {
        id: 2,
        name: '–û—Ç–ø—É—Å–∫',
        target: 2000000,
        current: 800000,
        deadline: '2024-06-30',
        category: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'
      }
    ];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–π:', error);
    currentData.goals = [];
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–≥–æ–≤
async function loadDebts(chatId) {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–ª–≥–æ–≤
    currentData.debts = [
      {
        id: 1,
        type: 'debt',
        counterparty: '–ê–ª–∏',
        amount: 500000,
        currency: 'UZS',
        description: '–í–∑—è–ª –≤ –¥–æ–ª–≥',
        dueDate: '2024-02-15',
        status: 'active'
      },
      {
        id: 2,
        type: 'credit',
        counterparty: '–ú–∞—Ä–∏—è',
        amount: 300000,
        currency: 'UZS',
        description: '–î–∞–ª –≤ –¥–æ–ª–≥',
        dueDate: '2024-01-30',
        status: 'active'
      }
    ];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–≥–æ–≤:', error);
    currentData.debts = [];
  }
}

// –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
function getDemoData() {
  return {
    transactions: [
      {
        id: 1,
        date: '2024-01-15',
        category: '–ü—Ä–æ–¥—É–∫—Ç—ã',
        amount: 25000,
        type: 'expense',
        comment: 'Magnum'
      },
      {
        id: 2,
        date: '2024-01-14',
        category: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
        amount: 500000,
        type: 'income',
        comment: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —è–Ω–≤–∞—Ä—å'
      },
      {
        id: 3,
        date: '2024-01-13',
        category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        amount: 15000,
        type: 'expense',
        comment: '–¢–∞–∫—Å–∏'
      },
      {
        id: 4,
        date: '2024-01-12',
        category: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        amount: 80000,
        type: 'expense',
        comment: '–ö–∏–Ω–æ'
      },
      {
        id: 5,
        date: '2024-01-11',
        category: '–ü—Ä–æ–¥–∞–∂–∞',
        amount: 150000,
        type: 'income',
        comment: '–ü—Ä–æ–¥–∞–∂–∞ –≤–µ—â–µ–π'
      }
    ],
    categories: {
      '–ü—Ä–æ–¥—É–∫—Ç—ã': { amount: 25000, percentage: 20 },
      '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': { amount: 15000, percentage: 12 },
      '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': { amount: 80000, percentage: 64 },
      '–ó–∞—Ä–ø–ª–∞—Ç–∞': { amount: 500000, percentage: 100 },
      '–ü—Ä–æ–¥–∞–∂–∞': { amount: 150000, percentage: 100 }
    },
    totals: {
      income: 650000,
      expense: 120000,
      balance: 530000
    }
  };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
function updateBalance() {
  document.getElementById('totalIncome').textContent = formatMoney(currentData.totals.income) + ' ‚Ç∏';
  document.getElementById('totalExpense').textContent = formatMoney(currentData.totals.expense) + ' ‚Ç∏';
  document.getElementById('totalBalance').textContent = formatMoney(currentData.totals.balance) + ' ‚Ç∏';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function updateTransactions() {
  const container = document.getElementById('transactionsList');
  const transactions = currentData.transactions;
  
  if (transactions.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üìä</div>
        <div class="empty-state-text">–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>
        <div class="empty-state-subtext">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–æ—Ç–µ</div>
      </div>
    `;
    return;
  }
  
  container.innerHTML = transactions.map(transaction => `
    <div class="transaction-item">
      <div class="transaction-info">
        <div class="transaction-category">${transaction.category}</div>
        <div class="transaction-date">${formatDate(transaction.date)}</div>
        ${transaction.comment ? `<div class="transaction-comment">${transaction.comment}</div>` : ''}
      </div>
      <div class="transaction-amount ${transaction.type}">
        ${transaction.type === 'income' ? '+' : '-'}${formatMoney(transaction.amount)} ‚Ç∏
      </div>
    </div>
  `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function updateCategories() {
  const container = document.getElementById('categoriesGrid');
  const categories = currentData.categories;
  
  if (Object.keys(categories).length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üìä</div>
        <div class="empty-state-text">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</div>
        <div class="empty-state-subtext">–î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</div>
      </div>
    `;
    return;
  }
  
  container.innerHTML = Object.entries(categories).map(([name, data]) => `
    <div class="category-card">
      <div class="category-icon">${getCategoryIcon(name)}</div>
      <div class="category-name">${name}</div>
      <div class="category-amount">${formatMoney(data.amount)} ‚Ç∏</div>
      <div class="category-percentage">${data.percentage}%</div>
    </div>
  `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–π
function updateGoals() {
  const container = document.getElementById('goalsContainer');
  const goals = currentData.goals;
  
  if (goals.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üéØ</div>
        <div class="empty-state-text">–ù–µ—Ç —Ü–µ–ª–µ–π</div>
        <div class="empty-state-subtext">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –≤ –±–æ—Ç–µ</div>
      </div>
    `;
    return;
  }
  
  container.innerHTML = goals.map(goal => {
    const progress = (goal.current / goal.target) * 100;
    const daysLeft = Math.ceil((new Date(goal.deadline) - new Date()) / (1000 * 60 * 60 * 24));
    
    return `
      <div class="goal-card">
        <div class="goal-header">
          <div class="goal-name">${goal.name}</div>
          <div class="goal-category">${goal.category}</div>
        </div>
        <div class="goal-progress">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${progress}%"></div>
          </div>
          <div class="progress-text">${Math.round(progress)}%</div>
        </div>
        <div class="goal-details">
          <div class="goal-amount">
            ${formatMoney(goal.current)} / ${formatMoney(goal.target)} ‚Ç∏
          </div>
          <div class="goal-deadline">
            ${daysLeft > 0 ? `${daysLeft} –¥–Ω–µ–π` : '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'}
          </div>
        </div>
      </div>
    `;
  }).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤
function updateDebts() {
  const container = document.getElementById('debtsContainer');
  const debts = currentData.debts;
  
  if (debts.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üí∏</div>
        <div class="empty-state-text">–ù–µ—Ç –¥–æ–ª–≥–æ–≤</div>
        <div class="empty-state-subtext">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ–ª–≥–∞–º–∏ –≤ –±–æ—Ç–µ</div>
      </div>
    `;
    return;
  }
  
  container.innerHTML = debts.map(debt => {
    const daysLeft = Math.ceil((new Date(debt.dueDate) - new Date()) / (1000 * 60 * 60 * 24));
    const isOverdue = daysLeft < 0;
    
    return `
      <div class="debt-card ${isOverdue ? 'overdue' : ''}">
        <div class="debt-header">
          <div class="debt-type">${debt.type === 'debt' ? '–î–æ–ª–≥' : '–ö—Ä–µ–¥–∏—Ç'}</div>
          <div class="debt-status ${debt.status}">${debt.status}</div>
        </div>
        <div class="debt-counterparty">${debt.counterparty}</div>
        <div class="debt-amount">${formatMoney(debt.amount)} ${debt.currency}</div>
        <div class="debt-description">${debt.description}</div>
        <div class="debt-deadline ${isOverdue ? 'overdue' : ''}">
          ${isOverdue ? '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ' : `${daysLeft} –¥–Ω–µ–π`}
        </div>
      </div>
    `;
  }).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
function updateCharts() {
  updateExpenseChart();
  updateIncomeChart();
  updateTrendChart();
}

// –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
function updateExpenseChart() {
  const ctx = document.getElementById('expenseChart');
  if (!ctx) return;
  
  // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
  if (charts.expenseChart) {
    charts.expenseChart.destroy();
  }
  
  const expenseCategories = Object.entries(currentData.categories)
    .filter(([name, data]) => data.amount > 0 && !isIncomeCategory(name))
    .sort((a, b) => b[1].amount - a[1].amount);
  
  if (expenseCategories.length === 0) {
    ctx.parentElement.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-text">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞</div>
      </div>
    `;
    return;
  }
  
  charts.expenseChart = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: expenseCategories.map(([name]) => name),
      datasets: [{
        data: expenseCategories.map(([, data]) => data.amount),
        backgroundColor: CONFIG.charts.colors.expense
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom'
        },
        title: {
          display: true,
          text: '–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'
        }
      }
    }
  });
}

// –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤
function updateIncomeChart() {
  const ctx = document.getElementById('incomeChart');
  if (!ctx) return;
  
  // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
  if (charts.incomeChart) {
    charts.incomeChart.destroy();
  }
  
  const incomeCategories = Object.entries(currentData.categories)
    .filter(([name, data]) => data.amount > 0 && isIncomeCategory(name))
    .sort((a, b) => b[1].amount - a[1].amount);
  
  if (incomeCategories.length === 0) {
    ctx.parentElement.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-text">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞</div>
      </div>
    `;
    return;
  }
  
  charts.incomeChart = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: incomeCategories.map(([name]) => name),
      datasets: [{
        data: incomeCategories.map(([, data]) => data.amount),
        backgroundColor: CONFIG.charts.colors.income
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom'
        },
        title: {
          display: true,
          text: '–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'
        }
      }
    }
  });
}

// –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤
function updateTrendChart() {
  const ctx = document.getElementById('trendChart');
  if (!ctx) return;
  
  // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
  if (charts.trendChart) {
    charts.trendChart.destroy();
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º
  const dailyData = {};
  currentData.transactions.forEach(transaction => {
    const date = transaction.date;
    if (!dailyData[date]) {
      dailyData[date] = { income: 0, expense: 0 };
    }
    if (transaction.type === 'income') {
      dailyData[date].income += transaction.amount;
    } else {
      dailyData[date].expense += transaction.amount;
    }
  });
  
  const dates = Object.keys(dailyData).sort();
  const incomeData = dates.map(date => dailyData[date].income);
  const expenseData = dates.map(date => dailyData[date].expense);
  
  if (dates.length === 0) {
    ctx.parentElement.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-text">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞</div>
      </div>
    `;
    return;
  }
  
  charts.trendChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: dates.map(date => formatDate(date)),
      datasets: [
        {
          label: '–î–æ—Ö–æ–¥—ã',
          data: incomeData,
          borderColor: '#28a745',
          backgroundColor: 'rgba(40, 167, 69, 0.1)',
          tension: 0.4
        },
        {
          label: '–†–∞—Å—Ö–æ–¥—ã',
          data: expenseData,
          borderColor: '#dc3545',
          backgroundColor: 'rgba(220, 53, 69, 0.1)',
          tension: 0.4
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'top'
        },
        title: {
          display: true,
          text: '–¢—Ä–µ–Ω–¥ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤'
        }
      },
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏
function updateTabContent(tabName) {
  switch (tabName) {
    case 'transactions':
      filterTransactions();
      break;
    case 'charts':
      updateCharts();
      break;
    case 'categories':
      updateCategories();
      break;
    case 'goals':
      updateGoals();
      break;
    case 'debts':
      updateDebts();
      break;
  }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function filterTransactions() {
  const periodFilter = document.getElementById('periodFilter').value;
  const typeFilter = document.getElementById('typeFilter').value;
  
  let filteredTransactions = [...currentData.transactions];
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
  if (periodFilter !== 'all') {
    if (periodFilter === 'custom' && currentPeriod.startDate && currentPeriod.endDate) {
      filteredTransactions = filteredTransactions.filter(transaction => {
        const transactionDate = new Date(transaction.date);
        return transactionDate >= currentPeriod.startDate && 
               transactionDate <= currentPeriod.endDate;
      });
    } else {
      const now = new Date();
      const currentMonth = now.getMonth();
      const currentYear = now.getFullYear();
      
      filteredTransactions = filteredTransactions.filter(transaction => {
        const transactionDate = new Date(transaction.date);
        
        switch (periodFilter) {
          case 'current':
            return transactionDate.getMonth() === currentMonth && 
                   transactionDate.getFullYear() === currentYear;
          case 'last':
            const lastMonth = currentMonth === 0 ? 11 : currentMonth - 1;
            const lastYear = currentMonth === 0 ? currentYear - 1 : currentYear;
            return transactionDate.getMonth() === lastMonth && 
                   transactionDate.getFullYear() === lastYear;
          case 'week':
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            return transactionDate >= weekAgo;
          default:
            return true;
        }
      });
    }
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
  if (typeFilter !== 'all') {
    filteredTransactions = filteredTransactions.filter(transaction => 
      transaction.type === typeFilter
    );
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const container = document.getElementById('transactionsList');
  
  if (filteredTransactions.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üîç</div>
        <div class="empty-state-text">–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>
        <div class="empty-state-subtext">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</div>
      </div>
    `;
    return;
  }
  
  container.innerHTML = filteredTransactions.map(transaction => `
    <div class="transaction-item">
      <div class="transaction-info">
        <div class="transaction-category">${transaction.category}</div>
        <div class="transaction-date">${formatDate(transaction.date)}</div>
        ${transaction.comment ? `<div class="transaction-comment">${transaction.comment}</div>` : ''}
      </div>
      <div class="transaction-amount ${transaction.type}">
        ${transaction.type === 'income' ? '+' : '-'}${formatMoney(transaction.amount)} ‚Ç∏
      </div>
    </div>
  `).join('');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
function showCustomPeriodModal() {
  const modal = document.getElementById('customPeriodModal');
  modal.style.display = 'flex';
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const today = new Date();
  const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
  
  document.getElementById('startDate').value = lastMonth.toISOString().split('T')[0];
  document.getElementById('endDate').value = today.toISOString().split('T')[0];
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
function applyCustomPeriod() {
  const startDate = new Date(document.getElementById('startDate').value);
  const endDate = new Date(document.getElementById('endDate').value);
  
  if (startDate && endDate && startDate <= endDate) {
    currentPeriod.type = 'custom';
    currentPeriod.startDate = startDate;
    currentPeriod.endDate = endDate;
    
    closeModal();
    filterTransactions();
  } else {
    Telegram.WebApp.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥');
  }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeModal() {
  const modal = document.getElementById('customPeriodModal');
  modal.style.display = 'none';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function refreshData() {
  loadData();
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
function downloadReport() {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
  Telegram.WebApp.showAlert('–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
}

// –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞
function openBot() {
  if (currentData.user) {
    // –ó–∞–º–µ–Ω–∏—Ç–µ 'Personal_F_bot' –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    Telegram.WebApp.openTelegramLink(`https://t.me/Personal_F_bot?start=webapp_${currentData.user.id}`);
  } else {
    Telegram.WebApp.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatMoney(amount) {
  return new Intl.NumberFormat('ru-RU').format(amount);
}

function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

function getCategoryIcon(categoryName) {
  return CONFIG.categories.icons[categoryName] || 'üìä';
}

function isIncomeCategory(categoryName) {
  return CONFIG.categories.incomeCategories.includes(categoryName);
}

function showLoading() {
  const containers = ['transactionsList', 'categoriesGrid', 'goalsContainer', 'debtsContainer'];
  containers.forEach(id => {
    const container = document.getElementById(id);
    if (container) {
      container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>';
    }
  });
}

function showError(message) {
  const containers = ['transactionsList', 'categoriesGrid', 'goalsContainer', 'debtsContainer'];
  containers.forEach(id => {
    const container = document.getElementById(id);
    if (container) {
      container.innerHTML = `
        <div class="empty-state">
          <div class="empty-state-icon">‚ùå</div>
          <div class="empty-state-text">–û—à–∏–±–∫–∞</div>
          <div class="empty-state-subtext">${message}</div>
        </div>
      `;
    }
  });
}